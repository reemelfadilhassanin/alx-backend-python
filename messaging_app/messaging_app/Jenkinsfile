pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "your-dockerhub-username/messaging_app"
        DOCKER_TAG = "latest"
    }

    tools {
        python "Python3"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: '44b6510e-c45a-4248-8df7-e43c0f8451f5',
                    url: 'https://github.com/reemelfadilhassanin/alx-backend-python.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    cd messaging_app
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                    cd messaging_app
                    . venv/bin/activate
                    pytest --maxfail=1 --disable-warnings -q --junitxml=report.xml
                '''
            }
            post {
                always {
                    junit 'messaging_app/report.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    cd messaging_app
                    docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id',
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $DOCKER_IMAGE:$DOCKER_TAG
                        docker logout
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished!"
        }
        failure {
            echo "Pipeline failed ‚ùå"
        }
        success {
            echo "Pipeline succeeded ‚úÖ (Tests passed & Docker image pushed üöÄ)"
        }
    }
}
